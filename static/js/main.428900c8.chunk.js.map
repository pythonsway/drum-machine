{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["drumSamples","keyCode","keyTrigger","id","url","DrumPad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","padActive","handleKeyPress","bind","assertThisInitialized","activatePad","playSound","document","addEventListener","removeEventListener","e","setState","_this2","sound","getElementById","currentTime","play","setTimeout","updateDisplay","clipId","replace","react_default","a","createElement","onClick","className","style","power","pointerEvents","src","clip","React","Component","PadBank","_this3","map","drumObj","i","padBankArr","App_DrumPad","App","_this4","display","String","fromCharCode","sliderVal","displayClipName","adjustVolume","powerControl","clearDisplay","name","_this5","target","value","Math","round","_this6","slice","querySelectorAll","forEach","volume","App_PadBank","clipVolume","float","type","min","max","step","onChange","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","alert","onUpdate","onSuccess","catch","error","console","ReactDOM","render","src_App_0","URL","process","href","origin","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.428900c8.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst drumSamples = [{\n  keyCode: 81,\n  keyTrigger: 'Q',\n  id: 'Heater-1',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n}, {\n  keyCode: 87,\n  keyTrigger: 'W',\n  id: 'Heater-2',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n}, {\n  keyCode: 69,\n  keyTrigger: 'E',\n  id: 'Heater-3',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n}, {\n  keyCode: 65,\n  keyTrigger: 'A',\n  id: 'Heater-4',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n}, {\n  keyCode: 83,\n  keyTrigger: 'S',\n  id: 'Clap',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n}, {\n  keyCode: 68,\n  keyTrigger: 'D',\n  id: 'Open-HH',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n}, {\n  keyCode: 90,\n  keyTrigger: 'Z',\n  id: \"Kick-n'-Hat\",\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n}, {\n  keyCode: 88,\n  keyTrigger: 'X',\n  id: 'Kick',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n}, {\n  keyCode: 67,\n  keyTrigger: 'C',\n  id: 'Closed-HH',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n},\n];\n\nclass DrumPad extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      padActive: false\n    }\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.activatePad = this.activatePad.bind(this);\n    this.playSound = this.playSound.bind(this);\n  }\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyPress);\n  }\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyPress);\n  }\n  handleKeyPress(e) {\n    if (e.keyCode === this.props.keyCode) {\n      this.playSound();\n    }\n  }\n  activatePad() {\n    this.setState({\n      padActive: !this.state.padActive\n    })\n  }\n  playSound() {\n    const sound = document.getElementById(this.props.keyTrigger);\n    sound.currentTime = 0;\n    sound.play();\n    this.activatePad();\n    setTimeout(() => this.activatePad(), 100);\n    this.props.updateDisplay(this.props.clipId.replace(/-/g, ' '));\n  }\n  render() {\n    return (\n      <div id={this.props.clipId}\n        onClick={this.playSound}\n        className={this.state.padActive ? \"drum-pad activePad\" : \"drum-pad inactivePad\"}\n        style={this.props.power ? { pointerEvents: 'auto' } : { pointerEvents: 'none' }} >\n        <audio className='clip' id={this.props.keyTrigger} src={this.props.clip}></audio>\n        {this.props.keyTrigger}\n      </div>\n    )\n  }\n}\n\nclass PadBank extends React.Component {\n  render() {\n    return (\n      <div className=\"pad-bank\" >\n        {drumSamples.map((drumObj, i, padBankArr) => {\n          return (\n            <DrumPad\n              clipId={padBankArr[i].id}\n              clip={this.props.power ? padBankArr[i].url : \"#\"}\n              keyTrigger={padBankArr[i].keyTrigger}\n              keyCode={padBankArr[i].keyCode}\n              updateDisplay={this.props.updateDisplay}\n              power={this.props.power} />\n          )\n        })}\n      </div>\n    )\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      power: true,\n      display: String.fromCharCode(160),\n      sliderVal: 0.4\n    }\n    this.displayClipName = this.displayClipName.bind(this);\n    this.adjustVolume = this.adjustVolume.bind(this);\n    this.powerControl = this.powerControl.bind(this);\n    this.clearDisplay = this.clearDisplay.bind(this);\n  }\n  powerControl() {\n    this.setState({\n      power: !this.state.power,\n      display: String.fromCharCode(160)\n    });\n  }\n  displayClipName(name) {\n    if (this.state.power) {\n      this.setState({\n        display: name\n      });\n    }\n  }\n  adjustVolume(e) {\n    if (this.state.power) {\n      this.setState({\n        sliderVal: e.target.value,\n        display: \"Volume: \" + Math.round(e.target.value * 100)\n      });\n      setTimeout(() => this.clearDisplay(), 2000);\n    }\n  }\n  clearDisplay() {\n    this.setState({\n      display: String.fromCharCode(160)\n    });\n  }\n  render() {\n    const clips = [].slice.call(document.querySelectorAll('.clip'));\n    clips.forEach(sound => {\n      sound.volume = this.state.sliderVal\n    });\n    return (\n      <div className=\"container\" id=\"drum-machine\">\n        <div className=\"logo\">Drum Machine</div>\n        <div id=\"display\">\n          <p>{this.state.display}</p>\n        </div>\n        <PadBank\n          power={this.state.power}\n          updateDisplay={this.displayClipName}\n          clipVolume={this.state.sliderVal} />\n        <div className=\"controls\">\n          <div className=\"power\">\n            <p>OFF - ON</p>\n            <div onClick={this.powerControl} className=\"select\">\n              <div style={this.state.power ? { float: 'right' } : { float: 'left' }}\n                className=\"inner\">\n              </div>\n            </div>\n          </div>\n          <div className=\"volume\">\n            <p>Volume</p>\n            <input type=\"range\" min=\"0\" max=\"1\" step=\"0.01\" value={this.state.sliderVal}\n              className=\"slider\"\n              onChange={this.adjustVolume} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.  https://bit.ly/CRA-PWA\n        navigator.serviceWorker.ready.then(() => {\n          alert(\n            `This web app is being served cache-first\n            by a service worker.`\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed. https://bit.ly/CRA-PWA\n              alert(\n                `New content is available and will be used when\n                all tabs for this page are closed. See`\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              alert(`Content is cached for offline use.`);\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      alert(\n        `No internet connection found.\n        App is running in offline mode.`\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}